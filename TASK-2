{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12036685,"sourceType":"datasetVersion","datasetId":7573904}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport os\n\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-02T14:48:09.186308Z","iopub.execute_input":"2025-06-02T14:48:09.187196Z","iopub.status.idle":"2025-06-02T14:48:09.193450Z","shell.execute_reply.started":"2025-06-02T14:48:09.187165Z","shell.execute_reply":"2025-06-02T14:48:09.192397Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"IMPORT LIBRARIES","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/movie-rating-prediction-dataset/IMDb Movies India.csv\", encoding=\"ISO-8859-1\")\ndf.head()\n\ndf = df.fillna(df.median(numeric_only=True))\ndf.replace([np.inf, -np.inf], np.nan, inplace=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-02T14:48:09.195427Z","iopub.execute_input":"2025-06-02T14:48:09.196162Z","iopub.status.idle":"2025-06-02T14:48:09.316446Z","shell.execute_reply.started":"2025-06-02T14:48:09.196135Z","shell.execute_reply":"2025-06-02T14:48:09.315180Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"Load the Dataset","metadata":{}},{"cell_type":"code","source":"# overview of the dataset\nprint(\"Shape:\", df.shape)\nprint(\"\\nMissing values:\\n\", df.isnull().sum())\ndf.info()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-02T14:48:09.317861Z","iopub.execute_input":"2025-06-02T14:48:09.318205Z","iopub.status.idle":"2025-06-02T14:48:09.348953Z","shell.execute_reply.started":"2025-06-02T14:48:09.318171Z","shell.execute_reply":"2025-06-02T14:48:09.347955Z"}},"outputs":[{"name":"stdout","text":"Shape: (15509, 10)\n\nMissing values:\n Name           0\nYear         528\nDuration    8269\nGenre       1877\nRating         0\nVotes       7589\nDirector     525\nActor 1     1617\nActor 2     2384\nActor 3     3144\ndtype: int64\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 15509 entries, 0 to 15508\nData columns (total 10 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Name      15509 non-null  object \n 1   Year      14981 non-null  object \n 2   Duration  7240 non-null   object \n 3   Genre     13632 non-null  object \n 4   Rating    15509 non-null  float64\n 5   Votes     7920 non-null   object \n 6   Director  14984 non-null  object \n 7   Actor 1   13892 non-null  object \n 8   Actor 2   13125 non-null  object \n 9   Actor 3   12365 non-null  object \ndtypes: float64(1), object(9)\nmemory usage: 1.2+ MB\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"\ndf = df.dropna(subset=[\"Rating\"])\n\n# Convert Duration from string like \"120 min\" to integer\ndf[\"Duration\"] = df[\"Duration\"].str.extract(\"(\\d+)\").astype(float)\n\n# Fill missing durations with median value\ndf[\"Duration\"] = df[\"Duration\"].fillna(df[\"Duration\"].median())\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-02T14:48:09.349985Z","iopub.execute_input":"2025-06-02T14:48:09.350340Z","iopub.status.idle":"2025-06-02T14:48:09.381221Z","shell.execute_reply.started":"2025-06-02T14:48:09.350311Z","shell.execute_reply":"2025-06-02T14:48:09.379870Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# We'll use Label Encoding for simplicity \nencoder = LabelEncoder()\n\nfor col in [\"Genre\", \"Director\", \"Actor 1\", \"Actor 2\", \"Actor 3\"]:\n    df[col] = df[col].fillna(\"Unknown\")\n    df[col] = encoder.fit_transform(df[col])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-02T14:48:09.383987Z","iopub.execute_input":"2025-06-02T14:48:09.384331Z","iopub.status.idle":"2025-06-02T14:48:09.446509Z","shell.execute_reply.started":"2025-06-02T14:48:09.384309Z","shell.execute_reply":"2025-06-02T14:48:09.445613Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Features we'll use to predict rating\nfeatures = [\"Genre\", \"Director\", \"Actor 1\", \"Actor 2\", \"Actor 3\", \"Duration\"]\n\nX = df[features]\ny = df[\"Rating\"]\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-02T14:48:09.447884Z","iopub.execute_input":"2025-06-02T14:48:09.448152Z","iopub.status.idle":"2025-06-02T14:48:09.459781Z","shell.execute_reply.started":"2025-06-02T14:48:09.448131Z","shell.execute_reply":"2025-06-02T14:48:09.458618Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# Using Random Forest Regressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-02T14:48:09.460916Z","iopub.execute_input":"2025-06-02T14:48:09.461210Z","iopub.status.idle":"2025-06-02T14:48:15.974952Z","shell.execute_reply.started":"2025-06-02T14:48:09.461184Z","shell.execute_reply":"2025-06-02T14:48:15.973682Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"RandomForestRegressor(random_state=42)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluation metrics\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Root Mean Squared Error (RMSE):\", rmse)\nprint(\"R² Score:\", r2)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-02T14:48:15.976523Z","iopub.execute_input":"2025-06-02T14:48:15.977029Z","iopub.status.idle":"2025-06-02T14:48:16.075918Z","shell.execute_reply.started":"2025-06-02T14:48:15.976995Z","shell.execute_reply":"2025-06-02T14:48:16.074999Z"}},"outputs":[{"name":"stdout","text":"Root Mean Squared Error (RMSE): 0.9521686331391914\nR² Score: 0.06765115358936469\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"# Plot feature importances\nimportances = model.feature_importances_\nfeature_names = X.columns\n\nplt.figure(figsize=(8, 5))\nsns.barplot(x=importances, y=feature_names)\nplt.title(\"Feature Importance\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-02T14:48:16.076927Z","iopub.execute_input":"2025-06-02T14:48:16.077184Z","iopub.status.idle":"2025-06-02T14:48:16.267559Z","shell.execute_reply.started":"2025-06-02T14:48:16.077163Z","shell.execute_reply":"2025-06-02T14:48:16.266394Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":18}]}
